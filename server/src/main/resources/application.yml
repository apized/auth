micronaut:
  application:
    name: Auth Server

  server:
    port: ${PORT:80}
    cors:
      enabled: true
      configurations:
        all:
          allowed-origins-regex: '^https?:\/\/.*$'

  metrics:
    enabled: true
    binders:
      web:
        server:
          enabled: true
          percentiles: "0.50,0.90,0.95,0.99"
          histogram: true
        client:
          enabled: true
          percentiles: "0.50,0.90,0.95,0.99"
          histogram: true
      files:
        enabled: false
      logback:
        enabled: false

    export:
      prometheus:
        enabled: true
        step: PT1M
        descriptions: true

  otel:
    enabled: ${OTEL_ENABLED:false}

  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**
      redoc:
        paths: classpath:META-INF/swagger/views/redoc
        mapping: /redoc/**

endpoints:
  all:
    port: ${MANAGEMENT_PORT:8080}
  health:
    details-visible: ANONYMOUS
    enabled: true
    sensitive: false
  info:
    enabled: false
  routes:
    enabled: true
    sensitive: false
  threaddump:
    enabled: false
  flyway:
    enabled: false
  beans:
    enabled: false
  refresh:
    enabled: false
  prometheus:
    sensitive: false

flyway:
  datasources:
    default:
      enabled: true

netty:
  default:
    allocator:
      max-order: 3

datasources:
  default:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:apized_auth}
    username: ${DB_USER:postgres}
    password: ${DB_PASS:postgres}

otel:
  traces:
    exporter: otlp
  metrics:
    exporter: otlp
  logs:
    exporter: otlp
  exporter:
    otlp:
      endpoint: ${OTEL_ENDPOINT:`https://otel.example.com`}
      headers: ${OTEL_HEADERS:}
      compression: ${OTEL_COMPRESSION:gzip}
      key: ${OTEL_KEY:}
      instance: ${HOSTNAME:local}
    experimental:
      expoter:
        otlp:
          retry:
            enabled: true
    metric:
      export:
        interval: 5000
    resource:
      attributes: "service.instance.id=${HOSTNAME:local}"

  exclusions:
    - /health.*
    - /sample/.*
    - /swagger.*
    - /prometheus

apized:
  slug: auth
  exclusions:
    - /
    - /health.*
    - /swagger.*
    - /prometheus

auth:
  frontendUrl: ${AUTH_FRONTEND_URL:https://auth-web.apized.org}
  backendUrl: ${AUTH_BACKEND_URL:https://auth-server.apized.org}
  token:
    duration: ${AUTH_TOKEN_DURATION:3600}
    secret: ${AUTH_TOKEN_SECRET:boatymcboatface}
  cookie:
    domain: ${AUTH_TOKEN_DOMAIN:apized.org}
    secure: ${AUTH_TOKEN_SECURE:true}

rabbitmq:
  exchange: ${RABBITMQ_EXCHANGE:apized}
  uri: ${RABBITMQ_URI:`amqp://localhost`}
  username: ${RABBITMQ_USERNAME:guest}
  password: ${RABBITMQ_PASSWORD:guest}
